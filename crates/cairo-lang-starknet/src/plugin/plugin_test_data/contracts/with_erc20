//! > Test expansion of a simple starknet contract with ownable component.

//! > test_runner_name
ExpandContractFromCrateTestRunner(expect_diagnostics: false)

//! > contract_file_name
cairo_level_tests/contracts/with_erc20.cairo

//! > generated_cairo_code
use starknet::ContractAddress;

#[starknet::contract]
mod erc20_contract {
    use cairo_level_tests::components::erc20::erc20 as erc20_comp;
    use starknet::ContractAddress;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ERC20Token: erc20_comp::Event,
    }

    #[abi(embed_v0)]
    impl ERC20Impl = erc20_comp::IERC20<ContractState>;

    impl ERC20HelperImpl = erc20_comp::ERC20HelperImpl<ContractState>;

    #[abi(per_item)]
    #[generate_trait]
    impl CtorImpl of CtorTrait {
        #[constructor]
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        ) {
            self.erc20_token.init(name, symbol, decimals, initial_supply, recipient);
        }
    }
<<<<<<< HEAD
||||||| 9b1d0a9fd
}


ERC20TraitDispatcherTrait:

trait ERC20TraitDispatcherTrait<T> {
    fn get_name(self: T, ) -> felt252;    fn get_symbol(self: T, ) -> felt252;    fn get_decimals(self: T, ) -> u8;    fn get_total_supply(self: T, ) -> u256;    fn balance_of(self: T, account: ContractAddress) -> u256;    fn allowance(self: T, owner: ContractAddress, spender: ContractAddress) -> u256;    fn transfer(self: T, recipient: ContractAddress, amount: u256);    fn transfer_from(
self: T, sender: ContractAddress, recipient: ContractAddress, amount: u256
    );    fn approve(self: T, spender: ContractAddress, amount: u256);    fn increase_allowance(self: T, spender: ContractAddress, added_value: u256);    fn decrease_allowance(
self: T, spender: ContractAddress, subtracted_value: u256
    );
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitDispatcher {
    contract_address: starknet::ContractAddress,
}

impl ERC20TraitDispatcherImpl of ERC20TraitDispatcherTrait<ERC20TraitDispatcher> {
    fn get_name(self: ERC20TraitDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_symbol(self: ERC20TraitDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_decimals(self: ERC20TraitDispatcher, ) -> u8 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u8>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_total_supply(self: ERC20TraitDispatcher, ) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn balance_of(self: ERC20TraitDispatcher, account: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn allowance(self: ERC20TraitDispatcher, owner: ContractAddress, spender: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer(self: ERC20TraitDispatcher, recipient: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn transfer_from(
self: ERC20TraitDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn approve(self: ERC20TraitDispatcher, spender: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn increase_allowance(self: ERC20TraitDispatcher, spender: ContractAddress, added_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn decrease_allowance(
self: ERC20TraitDispatcher, spender: ContractAddress, subtracted_value: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl ERC20TraitLibraryDispatcherImpl of ERC20TraitDispatcherTrait<ERC20TraitLibraryDispatcher> {
    fn get_name(self: ERC20TraitLibraryDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_symbol(self: ERC20TraitLibraryDispatcher, ) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_decimals(self: ERC20TraitLibraryDispatcher, ) -> u8 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u8>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_total_supply(self: ERC20TraitLibraryDispatcher, ) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn balance_of(self: ERC20TraitLibraryDispatcher, account: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn allowance(self: ERC20TraitLibraryDispatcher, owner: ContractAddress, spender: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer(self: ERC20TraitLibraryDispatcher, recipient: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn transfer_from(
self: ERC20TraitLibraryDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn approve(self: ERC20TraitLibraryDispatcher, spender: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn increase_allowance(self: ERC20TraitLibraryDispatcher, spender: ContractAddress, added_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn decrease_allowance(
self: ERC20TraitLibraryDispatcher, spender: ContractAddress, subtracted_value: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait ERC20TraitSafeDispatcherTrait<T> {
    fn get_name(self: T, ) -> starknet::SyscallResult<felt252>;    fn get_symbol(self: T, ) -> starknet::SyscallResult<felt252>;    fn get_decimals(self: T, ) -> starknet::SyscallResult<u8>;    fn get_total_supply(self: T, ) -> starknet::SyscallResult<u256>;    fn balance_of(self: T, account: ContractAddress) -> starknet::SyscallResult<u256>;    fn allowance(self: T, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256>;    fn transfer(self: T, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()>;    fn transfer_from(
self: T, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()>;    fn approve(self: T, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()>;    fn increase_allowance(self: T, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()>;    fn decrease_allowance(
self: T, spender: ContractAddress, subtracted_value: u256
    ) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl ERC20TraitSafeLibraryDispatcherImpl of ERC20TraitSafeDispatcherTrait<ERC20TraitSafeLibraryDispatcher> {
    fn get_name(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_symbol(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_decimals(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<u8> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u8>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_total_supply(self: ERC20TraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn balance_of(self: ERC20TraitSafeLibraryDispatcher, account: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn allowance(self: ERC20TraitSafeLibraryDispatcher, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer(self: ERC20TraitSafeLibraryDispatcher, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn transfer_from(
self: ERC20TraitSafeLibraryDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn approve(self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn increase_allowance(self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn decrease_allowance(
self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, subtracted_value: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl ERC20TraitSafeDispatcherImpl of ERC20TraitSafeDispatcherTrait<ERC20TraitSafeDispatcher> {
    fn get_name(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_symbol(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_decimals(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<u8> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u8>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_total_supply(self: ERC20TraitSafeDispatcher, ) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn balance_of(self: ERC20TraitSafeDispatcher, account: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn allowance(self: ERC20TraitSafeDispatcher, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer(self: ERC20TraitSafeDispatcher, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn transfer_from(
self: ERC20TraitSafeDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn approve(self: ERC20TraitSafeDispatcher, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn increase_allowance(self: ERC20TraitSafeDispatcher, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn decrease_allowance(
self: ERC20TraitSafeDispatcher, spender: ContractAddress, subtracted_value: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


impls:

impl ERC20TraitDispatcherCopy of Copy::<ERC20TraitDispatcher>;
impl ERC20TraitDispatcherDrop of Drop::<ERC20TraitDispatcher>;
impl ERC20TraitDispatcherSerde of Serde::<ERC20TraitDispatcher> {
    fn serialize(self: @ERC20TraitDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<ERC20TraitDispatcher> {
        Option::Some(ERC20TraitDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}
=======
}


ERC20TraitDispatcherTrait:

trait ERC20TraitDispatcherTrait<T> {
    fn get_name(self: T) -> felt252;
    fn get_symbol(self: T) -> felt252;
    fn get_decimals(self: T) -> u8;
    fn get_total_supply(self: T) -> u256;
    fn balance_of(self: T, account: ContractAddress) -> u256;
    fn allowance(self: T, owner: ContractAddress, spender: ContractAddress) -> u256;
    fn transfer(self: T, recipient: ContractAddress, amount: u256);
    fn transfer_from(
self: T, sender: ContractAddress, recipient: ContractAddress, amount: u256
    );
    fn approve(self: T, spender: ContractAddress, amount: u256);
    fn increase_allowance(self: T, spender: ContractAddress, added_value: u256);
    fn decrease_allowance(
self: T, spender: ContractAddress, subtracted_value: u256
    );
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitDispatcher {
    contract_address: starknet::ContractAddress,
}

impl ERC20TraitDispatcherImpl of ERC20TraitDispatcherTrait<ERC20TraitDispatcher> {
    fn get_name(self: ERC20TraitDispatcher) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_symbol(self: ERC20TraitDispatcher) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_decimals(self: ERC20TraitDispatcher) -> u8 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u8>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_total_supply(self: ERC20TraitDispatcher) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn balance_of(self: ERC20TraitDispatcher, account: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn allowance(self: ERC20TraitDispatcher, owner: ContractAddress, spender: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer(self: ERC20TraitDispatcher, recipient: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn transfer_from(
self: ERC20TraitDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn approve(self: ERC20TraitDispatcher, spender: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn increase_allowance(self: ERC20TraitDispatcher, spender: ContractAddress, added_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn decrease_allowance(
self: ERC20TraitDispatcher, spender: ContractAddress, subtracted_value: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl ERC20TraitLibraryDispatcherImpl of ERC20TraitDispatcherTrait<ERC20TraitLibraryDispatcher> {
    fn get_name(self: ERC20TraitLibraryDispatcher) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_symbol(self: ERC20TraitLibraryDispatcher) -> felt252 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_decimals(self: ERC20TraitLibraryDispatcher) -> u8 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u8>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn get_total_supply(self: ERC20TraitLibraryDispatcher) -> u256 {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn balance_of(self: ERC20TraitLibraryDispatcher, account: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn allowance(self: ERC20TraitLibraryDispatcher, owner: ContractAddress, spender: ContractAddress) -> u256 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<u256>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer(self: ERC20TraitLibraryDispatcher, recipient: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn transfer_from(
self: ERC20TraitLibraryDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn approve(self: ERC20TraitLibraryDispatcher, spender: ContractAddress, amount: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn increase_allowance(self: ERC20TraitLibraryDispatcher, spender: ContractAddress, added_value: u256) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }
    fn decrease_allowance(
self: ERC20TraitLibraryDispatcher, spender: ContractAddress, subtracted_value: u256
    ) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait ERC20TraitSafeDispatcherTrait<T> {
    fn get_name(self: T) -> starknet::SyscallResult<felt252>;
    fn get_symbol(self: T) -> starknet::SyscallResult<felt252>;
    fn get_decimals(self: T) -> starknet::SyscallResult<u8>;
    fn get_total_supply(self: T) -> starknet::SyscallResult<u256>;
    fn balance_of(self: T, account: ContractAddress) -> starknet::SyscallResult<u256>;
    fn allowance(self: T, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256>;
    fn transfer(self: T, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()>;
    fn transfer_from(
self: T, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()>;
    fn approve(self: T, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()>;
    fn increase_allowance(self: T, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()>;
    fn decrease_allowance(
self: T, spender: ContractAddress, subtracted_value: u256
    ) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl ERC20TraitSafeLibraryDispatcherImpl of ERC20TraitSafeDispatcherTrait<ERC20TraitSafeLibraryDispatcher> {
    fn get_name(self: ERC20TraitSafeLibraryDispatcher) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_symbol(self: ERC20TraitSafeLibraryDispatcher) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_decimals(self: ERC20TraitSafeLibraryDispatcher) -> starknet::SyscallResult<u8> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u8>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_total_supply(self: ERC20TraitSafeLibraryDispatcher) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn balance_of(self: ERC20TraitSafeLibraryDispatcher, account: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn allowance(self: ERC20TraitSafeLibraryDispatcher, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer(self: ERC20TraitSafeLibraryDispatcher, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn transfer_from(
self: ERC20TraitSafeLibraryDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn approve(self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn increase_allowance(self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn decrease_allowance(
self: ERC20TraitSafeLibraryDispatcher, spender: ContractAddress, subtracted_value: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct ERC20TraitSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl ERC20TraitSafeDispatcherImpl of ERC20TraitSafeDispatcherTrait<ERC20TraitSafeDispatcher> {
    fn get_name(self: ERC20TraitSafeDispatcher) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_name"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_symbol(self: ERC20TraitSafeDispatcher) -> starknet::SyscallResult<felt252> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_symbol"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<felt252>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_decimals(self: ERC20TraitSafeDispatcher) -> starknet::SyscallResult<u8> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_decimals"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u8>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn get_total_supply(self: ERC20TraitSafeDispatcher) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("get_total_supply"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn balance_of(self: ERC20TraitSafeDispatcher, account: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@account, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("balance_of"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn allowance(self: ERC20TraitSafeDispatcher, owner: ContractAddress, spender: ContractAddress) -> starknet::SyscallResult<u256> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@owner, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<u256>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer(self: ERC20TraitSafeDispatcher, recipient: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn transfer_from(
self: ERC20TraitSafeDispatcher, sender: ContractAddress, recipient: ContractAddress, amount: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@sender, ref __calldata__);
        serde::Serde::<ContractAddress>::serialize(@recipient, ref __calldata__);
        serde::Serde::<u256
>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_from"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn approve(self: ERC20TraitSafeDispatcher, spender: ContractAddress, amount: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@amount, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("approve"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn increase_allowance(self: ERC20TraitSafeDispatcher, spender: ContractAddress, added_value: u256) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256>::serialize(@added_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("increase_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }
    fn decrease_allowance(
self: ERC20TraitSafeDispatcher, spender: ContractAddress, subtracted_value: u256
    ) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@spender, ref __calldata__);
        serde::Serde::<u256
>::serialize(@subtracted_value, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("decrease_allowance"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


impls:

impl ERC20TraitDispatcherCopy of Copy::<ERC20TraitDispatcher>;
impl ERC20TraitDispatcherDrop of Drop::<ERC20TraitDispatcher>;
impl ERC20TraitDispatcherSerde of Serde::<ERC20TraitDispatcher> {
    fn serialize(self: @ERC20TraitDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<ERC20TraitDispatcher> {
        Option::Some(ERC20TraitDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}
>>>>>>> origin/dev-v2.3.0


    struct ContractState {
        erc20_token: erc20_comp::ComponentState<ContractState>,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
<<<<<<< HEAD
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            erc20_token: erc20_comp::unsafe_new_component_state::<ContractState>(),
        }
    }
||||||| 9b1d0a9fd
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    
    mod name {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, felt252> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x361458367e696363fbcc70777d07ebbd2394e89fd0adcaf147faccd1d294d60>()
            }
        }
    }
    mod symbol {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, felt252> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x216b05c387bab9ac31918a3e61672f4618601f3c598a2f3f2710f37053e1ea4>()
            }
        }
    }
    mod decimals {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, u8> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x4c4fb1ab068f6039d5780c68dd0fa2f8742cceb3426d19667778ca7f3518a9>()
            }
        }
    }
    mod total_supply {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, u256> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836>()
            }
        }
    }
    mod balances {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}

        impl StorageMapComponentMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ComponentMemberState, ContractAddress, u256> {
            fn address(self: @ComponentMemberState, key: ContractAddress) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<ContractAddress>::hash(0x25b1ef8ee6544359221f3cf316f768360e83448109193bdcef77f52a79d95c4, key))
            }
        }
    }
    mod allowances {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}

        impl StorageMapComponentMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ComponentMemberState, (ContractAddress, ContractAddress), u256> {
            fn address(self: @ComponentMemberState, key: (ContractAddress, ContractAddress)) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<(ContractAddress, ContractAddress)>::hash(0xbf4c436d6f8521e5c6189511c75075de702ad597ce22c1786275e8e5167ec7, key))
            }
        }
    }

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl IERC20<
            TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>
> of super::ERC20Trait<TContractState> {
    
    fn get_name(self: @TContractState) -> felt252 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_name(component, )
    }
    
    fn get_symbol(self: @TContractState) -> felt252 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_symbol(component, )
    }
    
    fn get_decimals(self: @TContractState) -> u8 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_decimals(component, )
    }
    
    fn get_total_supply(self: @TContractState) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_total_supply(component, )
    }
    
    fn balance_of(self: @TContractState, account: ContractAddress) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::balance_of(component, account, )
    }
    
    fn allowance(self: @TContractState, owner: ContractAddress, spender: ContractAddress
) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::allowance(component, owner, spender, )
    }
    
    fn transfer(ref self: TContractState, recipient: ContractAddress, amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::transfer(ref component, recipient, amount, )
    }
    
    fn transfer_from(ref self: TContractState,             sender: ContractAddress,             recipient: ContractAddress,             amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::transfer_from(ref component,             sender,             recipient,             amount, )
    }
    
    fn approve(ref self: TContractState, spender: ContractAddress, amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::approve(ref component, spender, amount, )
    }
    
    fn increase_allowance(ref self: TContractState, spender: ContractAddress, added_value: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::increase_allowance(ref component, spender, added_value, )
    }
    
    fn decrease_allowance(ref self: TContractState,             spender: ContractAddress,             subtracted_value: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::decrease_allowance(ref component,             spender,             subtracted_value, )
    }
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Transfer(val) => {
                array::ArrayTrait::append(ref keys, selector!("Transfer"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Approval(val) => {
                array::ArrayTrait::append(ref keys, selector!("Approval"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("Transfer") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Transfer(val));
        }
        if selector == selector!("Approval") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Approval(val));
        }
        Option::None
    }
}
impl EventTransferIntoEvent of Into<TransferEvent, Event> {
    fn into(self: TransferEvent) -> Event {
        Event::Transfer(self)
    }
}
impl EventApprovalIntoEvent of Into<ApprovalEvent, Event> {
    fn into(self: ApprovalEvent) -> Event {
        Event::Approval(self)
    }
}



impls:

impl TransferEventDrop of Drop::<TransferEvent>;


starknet_derive:

impl TransferEventIsEvent of starknet::Event<TransferEvent> {
    fn append_keys_and_data(
        self: @TransferEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.from, ref data);
                serde::Serde::serialize(self.to, ref data);
                serde::Serde::serialize(self.value, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<TransferEvent> {
                let from = serde::Serde::deserialize(
                    ref data
                )?;
                let to = serde::Serde::deserialize(
                    ref data
                )?;
                let value = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(TransferEvent {from, to, value, })
    }
}


impls:

impl ApprovalEventDrop of Drop::<ApprovalEvent>;


starknet_derive:

impl ApprovalEventIsEvent of starknet::Event<ApprovalEvent> {
    fn append_keys_and_data(
        self: @ApprovalEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.owner, ref data);
                serde::Serde::serialize(self.spender, ref data);
                serde::Serde::serialize(self.value, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<ApprovalEvent> {
                let owner = serde::Serde::deserialize(
                    ref data
                )?;
                let spender = serde::Serde::deserialize(
                    ref data
                )?;
                let value = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(ApprovalEvent {owner, spender, value, })
    }
}


generate_trait:

    trait ERC20HelperTrait<
        TContractState, impl X: HasComponent<TContractState>
    > {
        fn transfer_helper(
            ref self: ComponentState<TContractState>,
            sender: ContractAddress,
            recipient: ContractAddress,
            amount: u256
        );

        fn spend_allowance(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        );

        fn approve_helper(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        );
        fn init(
            ref self: ComponentState<TContractState>,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        );
    }


embeddable:

trait UnsafeNewContractStateTraitForIERC20<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_name<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_name(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_symbol<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_symbol(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_decimals<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_decimals(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u8>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_total_supply<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
=======
    fn component_state_for_testing<TContractState>() -> ComponentState<TContractState> {
        unsafe_new_component_state::<TContractState>()
    }
    
    mod name {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, felt252> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x361458367e696363fbcc70777d07ebbd2394e89fd0adcaf147faccd1d294d60>()
            }
        }
    }
    mod symbol {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, felt252> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x216b05c387bab9ac31918a3e61672f4618601f3c598a2f3f2710f37053e1ea4>()
            }
        }
    }
    mod decimals {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, u8> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x4c4fb1ab068f6039d5780c68dd0fa2f8742cceb3426d19667778ca7f3518a9>()
            }
        }
    }
    mod total_supply {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        impl StorageComponentMemberStateImpl of starknet::storage::StorageMemberAddressTrait<ComponentMemberState, u256> {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress nopanic {
                starknet::storage_base_address_const::<0x1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836>()
            }
        }
    }
    mod balances {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}

        impl StorageMapComponentMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ComponentMemberState, ContractAddress, u256> {
            fn address(self: @ComponentMemberState, key: ContractAddress) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<ContractAddress>::hash(0x25b1ef8ee6544359221f3cf316f768360e83448109193bdcef77f52a79d95c4, key))
            }
        }
    }
    mod allowances {
        use super::ContractAddress;
        use super::get_caller_address;
        use super::contract_address_const;
        use super::Event;
        use super::TransferEvent;
        use super::ApprovalEvent;
        use super::ERC20Impl;
        use super::ERC20HelperImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}

        impl StorageMapComponentMemberStateImpl of starknet::storage::StorageMapMemberAddressTrait<ComponentMemberState, (ContractAddress, ContractAddress), u256> {
            fn address(self: @ComponentMemberState, key: (ContractAddress, ContractAddress)) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<(ContractAddress, ContractAddress)>::hash(0xbf4c436d6f8521e5c6189511c75075de702ad597ce22c1786275e8e5167ec7, key))
            }
        }
    }

use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait,
};
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl IERC20<
            TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>
> of super::ERC20Trait<TContractState> {
    
    fn get_name(self: @TContractState) -> felt252 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_name(component)
    }
    
    fn get_symbol(self: @TContractState) -> felt252 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_symbol(component)
    }
    
    fn get_decimals(self: @TContractState) -> u8 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_decimals(component)
    }
    
    fn get_total_supply(self: @TContractState) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::get_total_supply(component)
    }
    
    fn balance_of(self: @TContractState, account: ContractAddress) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::balance_of(component, account)
    }
    
    fn allowance(self: @TContractState, owner: ContractAddress, spender: ContractAddress
) -> u256 {
        let component = HasComponent::get_component(self);
        ERC20Impl::allowance(component, owner, spender)
    }
    
    fn transfer(ref self: TContractState, recipient: ContractAddress, amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::transfer(ref component, recipient, amount)
    }
    
    fn transfer_from(ref self: TContractState,             sender: ContractAddress,             recipient: ContractAddress,             amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::transfer_from(ref component,             sender,             recipient,             amount)
    }
    
    fn approve(ref self: TContractState, spender: ContractAddress, amount: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::approve(ref component, spender, amount)
    }
    
    fn increase_allowance(ref self: TContractState, spender: ContractAddress, added_value: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::increase_allowance(ref component, spender, added_value)
    }
    
    fn decrease_allowance(ref self: TContractState,             spender: ContractAddress,             subtracted_value: u256
) {
        let mut component = HasComponent::get_component_mut(ref self);
        ERC20Impl::decrease_allowance(ref component,             spender,             subtracted_value)
    }
}

impls:

impl EventDrop of Drop::<Event>;


starknet_derive:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Transfer(val) => {
                array::ArrayTrait::append(ref keys, selector!("Transfer"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
            Event::Approval(val) => {
                array::ArrayTrait::append(ref keys, selector!("Approval"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("Transfer") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Transfer(val));
        }
        if selector == selector!("Approval") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Approval(val));
        }
        Option::None
    }
}
impl EventTransferIntoEvent of Into<TransferEvent, Event> {
    fn into(self: TransferEvent) -> Event {
        Event::Transfer(self)
    }
}
impl EventApprovalIntoEvent of Into<ApprovalEvent, Event> {
    fn into(self: ApprovalEvent) -> Event {
        Event::Approval(self)
    }
}



impls:

impl TransferEventDrop of Drop::<TransferEvent>;


starknet_derive:

impl TransferEventIsEvent of starknet::Event<TransferEvent> {
    fn append_keys_and_data(
        self: @TransferEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.from, ref data);
                serde::Serde::serialize(self.to, ref data);
                serde::Serde::serialize(self.value, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<TransferEvent> {
                let from = serde::Serde::deserialize(
                    ref data
                )?;
                let to = serde::Serde::deserialize(
                    ref data
                )?;
                let value = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(TransferEvent {from, to, value, })
    }
}


impls:

impl ApprovalEventDrop of Drop::<ApprovalEvent>;


starknet_derive:

impl ApprovalEventIsEvent of starknet::Event<ApprovalEvent> {
    fn append_keys_and_data(
        self: @ApprovalEvent, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
                serde::Serde::serialize(self.owner, ref data);
                serde::Serde::serialize(self.spender, ref data);
                serde::Serde::serialize(self.value, ref data);
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<ApprovalEvent> {
                let owner = serde::Serde::deserialize(
                    ref data
                )?;
                let spender = serde::Serde::deserialize(
                    ref data
                )?;
                let value = serde::Serde::deserialize(
                    ref data
                )?;
        Option::Some(ApprovalEvent {owner, spender, value, })
    }
}


generate_trait:

    trait ERC20HelperTrait<
        TContractState, impl X: HasComponent<TContractState>
    > {
        fn transfer_helper(
            ref self: ComponentState<TContractState>,
            sender: ContractAddress,
            recipient: ContractAddress,
            amount: u256
        );

        fn spend_allowance(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        );

        fn approve_helper(
            ref self: ComponentState<TContractState>,
            owner: ContractAddress,
            spender: ContractAddress,
            amount: u256
        );
        fn init(
            ref self: ComponentState<TContractState>,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        );
    }


embeddable:

trait UnsafeNewContractStateTraitForIERC20<TContractState> {
    fn unsafe_new_contract_state() -> TContractState;
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_name<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_name(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_symbol<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_symbol(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<felt252>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_decimals<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = UnsafeNewContractState::unsafe_new_contract_state();
    let res = IERC20::<TContractState, _, TContractStateDrop>::get_decimals(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u8>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__IERC20__get_total_supply<TContractState, +HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>, impl UnsafeNewContractState: UnsafeNewContractStateTraitForIERC20<TContractState>>(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
>>>>>>> origin/dev-v2.3.0
    
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};

impl ContractStateIERC20 of
    erc20_comp::UnsafeNewContractStateTraitForIERC20<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__CtorImpl__constructor(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_name = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_symbol = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_decimals = option::OptionTraitImpl::expect(
        serde::Serde::<u8>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    let __arg_initial_supply = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #4'
    );
    let __arg_recipient = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #5'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    CtorImpl::constructor(ref contract_state, __arg_name, __arg_symbol, __arg_decimals, __arg_initial_supply, __arg_recipient);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
        use super::__wrapper__CtorImpl__constructor as constructor;
    }

    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

impl HasComponentImpl_erc20_comp of erc20_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @erc20_comp::ComponentState<ContractState> {
        self.erc20_token
    }
    fn get_component_mut(ref self: ContractState) -> erc20_comp::ComponentState<ContractState> {
        erc20_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @erc20_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: erc20_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: traits::Into<S, erc20_comp::Event>>(ref self: erc20_comp::ComponentState<ContractState>, event: S) {
        let event: erc20_comp::Event = traits::Into::into(event);
        let mut contract = erc20_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::ERC20Token(event));
    }
}
impl EventDrop of Drop::<Event>;
impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ERC20Token(val) => {
                array::ArrayTrait::append(ref keys, selector!("ERC20Token"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("ERC20Token") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ERC20Token(val));
        }
        Option::None
    }
}
impl EventERC20TokenIntoEvent of Into<erc20_comp::Event, Event> {
    fn into(self: erc20_comp::Event) -> Event {
        Event::ERC20Token(self)
    }
}
    trait CtorTrait {
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        );
    }
}

    use cairo_level_tests::components::erc20::erc20 as erc20_comp;
    use starknet::ContractAddress;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        ERC20Token: erc20_comp::Event,
    }

    #[abi(embed_v0)]
    impl ERC20Impl = erc20_comp::IERC20<ContractState>;

    impl ERC20HelperImpl = erc20_comp::ERC20HelperImpl<ContractState>;

    #[abi(per_item)]
    #[generate_trait]
    impl CtorImpl of CtorTrait {
        #[constructor]
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        ) {
            self.erc20_token.init(name, symbol, decimals, initial_supply, recipient);
        }
    }


    struct ContractState {
        erc20_token: erc20_comp::ComponentState<ContractState>,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            erc20_token: erc20_comp::unsafe_new_component_state::<ContractState>(),
        }
    }
    
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};

impl ContractStateIERC20 of
    erc20_comp::UnsafeNewContractStateTraitForIERC20<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__CtorImpl__constructor(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_name = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_symbol = option::OptionTraitImpl::expect(
        serde::Serde::<felt252>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    let __arg_decimals = option::OptionTraitImpl::expect(
        serde::Serde::<u8>::deserialize(ref data),
        'Failed to deserialize param #3'
    );
    let __arg_initial_supply = option::OptionTraitImpl::expect(
        serde::Serde::<u256>::deserialize(ref data),
        'Failed to deserialize param #4'
    );
    let __arg_recipient = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #5'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    CtorImpl::constructor(ref contract_state, __arg_name, __arg_symbol, __arg_decimals, __arg_initial_supply, __arg_recipient);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}


    mod __external {
    }

    mod __l1_handler {
    }

    mod __constructor {
        use super::__wrapper__CtorImpl__constructor as constructor;
    }

    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

impl HasComponentImpl_erc20_comp of erc20_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @erc20_comp::ComponentState<ContractState> {
        self.erc20_token
    }
    fn get_component_mut(ref self: ContractState) -> erc20_comp::ComponentState<ContractState> {
        erc20_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @erc20_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: erc20_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: traits::Into<S, erc20_comp::Event>>(ref self: erc20_comp::ComponentState<ContractState>, event: S) {
        let event: erc20_comp::Event = traits::Into::into(event);
        let mut contract = erc20_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::ERC20Token(event));
    }
}
impl EventDrop of Drop::<Event>;
impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::ERC20Token(val) => {
                array::ArrayTrait::append(ref keys, selector!("ERC20Token"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("ERC20Token") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::ERC20Token(val));
        }
        Option::None
    }
}
impl EventERC20TokenIntoEvent of Into<erc20_comp::Event, Event> {
    fn into(self: erc20_comp::Event) -> Event {
        Event::ERC20Token(self)
    }
}
    trait CtorTrait {
        fn constructor(
            ref self: ContractState,
            name: felt252,
            symbol: felt252,
            decimals: u8,
            initial_supply: u256,
            recipient: ContractAddress
        );
    }

//! > expected_diagnostics
