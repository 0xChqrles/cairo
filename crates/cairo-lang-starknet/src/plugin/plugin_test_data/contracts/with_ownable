//! > Test expansion of a simple starknet contract with ownable component.

//! > test_runner_name
ExpandContractFromCrateTestRunner(expect_diagnostics: false)

//! > contract_file_name
cairo_level_tests/contracts/with_ownable.cairo

//! > generated_cairo_code
use starknet::ContractAddress;
#[starknet::contract]
mod ownable_balance {
    use cairo_level_tests::components::ownable::ownable as ownable_comp;
    use cairo_level_tests::components::ownable::TransferTrait;
    use starknet::ContractAddress;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Ownable: ownable_comp::Event,
    }

    #[abi(embed_v0)]
    impl OwnershipTransfer = ownable_comp::Transfer<ContractState>;

    impl OwnershipHelper = ownable_comp::OwnableHelperImpl<ContractState>;

    #[abi(per_item)]
    #[generate_trait]
    impl OwnableBalanceImpl of OwnableBalance {
        #[constructor]
        fn constructor(ref self: ContractState, owner: ContractAddress, initial: u128) {
            self.ownable.init_ownable(owner);
            self.balance.write(initial);
        }
        #[external(v0)]
        fn get_balance(self: @ContractState) -> u128 {
            self.balance.read()
        }
        #[external(v0)]
        fn set_balance(ref self: ContractState, new_balance: u128) {
            self.ownable.validate_ownership();
            self.balance.write(new_balance);
        }
    }
<<<<<<< HEAD
||||||| 9b1d0a9fd
}


TransferTraitDispatcherTrait:

trait TransferTraitDispatcherTrait<T> {
    fn owner(self: T, ) -> ContractAddress;    fn transfer_ownership(self: T, new_owner: ContractAddress);
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitDispatcher {
    contract_address: starknet::ContractAddress,
}

impl TransferTraitDispatcherImpl of TransferTraitDispatcherTrait<TransferTraitDispatcher> {
    fn owner(self: TransferTraitDispatcher, ) -> ContractAddress {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<ContractAddress>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer_ownership(self: TransferTraitDispatcher, new_owner: ContractAddress) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl TransferTraitLibraryDispatcherImpl of TransferTraitDispatcherTrait<TransferTraitLibraryDispatcher> {
    fn owner(self: TransferTraitLibraryDispatcher, ) -> ContractAddress {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<ContractAddress>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer_ownership(self: TransferTraitLibraryDispatcher, new_owner: ContractAddress) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait TransferTraitSafeDispatcherTrait<T> {
    fn owner(self: T, ) -> starknet::SyscallResult<ContractAddress>;    fn transfer_ownership(self: T, new_owner: ContractAddress) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl TransferTraitSafeLibraryDispatcherImpl of TransferTraitSafeDispatcherTrait<TransferTraitSafeLibraryDispatcher> {
    fn owner(self: TransferTraitSafeLibraryDispatcher, ) -> starknet::SyscallResult<ContractAddress> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<ContractAddress>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer_ownership(self: TransferTraitSafeLibraryDispatcher, new_owner: ContractAddress) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl TransferTraitSafeDispatcherImpl of TransferTraitSafeDispatcherTrait<TransferTraitSafeDispatcher> {
    fn owner(self: TransferTraitSafeDispatcher, ) -> starknet::SyscallResult<ContractAddress> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<ContractAddress>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer_ownership(self: TransferTraitSafeDispatcher, new_owner: ContractAddress) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


impls:

impl TransferTraitDispatcherCopy of Copy::<TransferTraitDispatcher>;
impl TransferTraitDispatcherDrop of Drop::<TransferTraitDispatcher>;
impl TransferTraitDispatcherSerde of Serde::<TransferTraitDispatcher> {
    fn serialize(self: @TransferTraitDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TransferTraitDispatcher> {
        Option::Some(TransferTraitDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreTransferTraitDispatcher of starknet::Store::<TransferTraitDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<TransferTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            TransferTraitDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: TransferTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<TransferTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            TransferTraitDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: TransferTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}
=======
}


TransferTraitDispatcherTrait:

trait TransferTraitDispatcherTrait<T> {
    fn owner(self: T) -> ContractAddress;
    fn transfer_ownership(self: T, new_owner: ContractAddress);
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitDispatcher {
    contract_address: starknet::ContractAddress,
}

impl TransferTraitDispatcherImpl of TransferTraitDispatcherTrait<TransferTraitDispatcher> {
    fn owner(self: TransferTraitDispatcher) -> ContractAddress {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<ContractAddress>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer_ownership(self: TransferTraitDispatcher, new_owner: ContractAddress) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl TransferTraitLibraryDispatcherImpl of TransferTraitDispatcherTrait<TransferTraitLibraryDispatcher> {
    fn owner(self: TransferTraitLibraryDispatcher) -> ContractAddress {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        option::OptionTrait::expect(
            serde::Serde::<ContractAddress>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }
    fn transfer_ownership(self: TransferTraitLibraryDispatcher, new_owner: ContractAddress) {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(ret_data);
        ()
    }

}

trait TransferTraitSafeDispatcherTrait<T> {
    fn owner(self: T) -> starknet::SyscallResult<ContractAddress>;
    fn transfer_ownership(self: T, new_owner: ContractAddress) -> starknet::SyscallResult<()>;
}

#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitSafeLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl TransferTraitSafeLibraryDispatcherImpl of TransferTraitSafeDispatcherTrait<TransferTraitSafeLibraryDispatcher> {
    fn owner(self: TransferTraitSafeLibraryDispatcher) -> starknet::SyscallResult<ContractAddress> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<ContractAddress>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer_ownership(self: TransferTraitSafeLibraryDispatcher, new_owner: ContractAddress) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::syscalls::library_call_syscall(
            self.class_hash,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


#[derive(Copy, Drop, starknet::Store, Serde)]
struct TransferTraitSafeDispatcher {
    contract_address: starknet::ContractAddress,
}

impl TransferTraitSafeDispatcherImpl of TransferTraitSafeDispatcherTrait<TransferTraitSafeDispatcher> {
    fn owner(self: TransferTraitSafeDispatcher) -> starknet::SyscallResult<ContractAddress> {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("owner"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(
            option::OptionTrait::expect(
                serde::Serde::<ContractAddress>::deserialize(ref ret_data),
                'Returned data too short',
            )
        )
    }
    fn transfer_ownership(self: TransferTraitSafeDispatcher, new_owner: ContractAddress) -> starknet::SyscallResult<()> {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<ContractAddress>::serialize(@new_owner, ref __calldata__);

        let mut ret_data = starknet::call_contract_syscall(
            self.contract_address,
            selector!("transfer_ownership"),
            array::ArrayTrait::span(@__calldata__),
        );
        let mut ret_data = ret_data?;
        Result::Ok(())
    }

}


impls:

impl TransferTraitDispatcherCopy of Copy::<TransferTraitDispatcher>;
impl TransferTraitDispatcherDrop of Drop::<TransferTraitDispatcher>;
impl TransferTraitDispatcherSerde of Serde::<TransferTraitDispatcher> {
    fn serialize(self: @TransferTraitDispatcher, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<TransferTraitDispatcher> {
        Option::Some(TransferTraitDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


starknet_derive:

impl StoreTransferTraitDispatcher of starknet::Store::<TransferTraitDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<TransferTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            TransferTraitDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: TransferTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<TransferTraitDispatcher> {
        let contract_address = starknet::Store::<starknet::ContractAddress>::read_at_offset(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            TransferTraitDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: TransferTraitDispatcher) -> starknet::SyscallResult<()> {
        starknet::Store::<starknet::ContractAddress>::write_at_offset(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size() -> u8 {
        starknet::Store::<starknet::ContractAddress>::size()
    }
}
>>>>>>> origin/dev-v2.3.0


    struct ContractState {
        ownable: ownable_comp::ComponentState<ContractState>,
        balance: balance::ContractMemberState,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            ownable: ownable_comp::unsafe_new_component_state::<ContractState>(),
            balance: balance::ContractMemberState {},
        }
    }
    
    use balance::InternalContractMemberStateTrait as balanceContractMemberStateTrait;
    mod balance {
        use super::ownable_comp;
        use super::TransferTrait;
        use super::ContractAddress;
        use super::Event;
        use super::OwnableBalanceImpl;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        trait InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractMemberState) -> u128;
            fn write(ref self: ContractMemberState, value: u128);
        }

        impl InternalContractMemberStateImpl of InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091>()
            }
            fn read(self: @ContractMemberState) -> u128 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u128>::read(
                        address_domain,
                        InternalContractMemberStateImpl::address(self),
                    )
                )
            }
            fn write(ref self: ContractMemberState, value: u128) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u128>::write(
                        address_domain,
                        InternalContractMemberStateImpl::address(@self),
                        value,
                    )
                )
            }
        }
impl ContractMemberStateCopy of Copy::<ContractMemberState>;
impl ContractMemberStateDrop of Drop::<ContractMemberState>;
    }
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};
<<<<<<< HEAD
||||||| 9b1d0a9fd
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl Transfer<
            TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>
> of super::TransferTrait<TContractState> {
    
    fn owner(self: @TContractState) -> ContractAddress {
        let component = HasComponent::get_component(self);
        TransferImpl::owner(component, )
    }
    
    fn transfer_ownership(ref self: TContractState, new_owner: ContractAddress
) {
        let mut component = HasComponent::get_component_mut(ref self);
        TransferImpl::transfer_ownership(ref component, new_owner, )
    }
}

generate_trait:

    trait OwnableHelperTrait<
        TContractState, impl X: HasComponent<TContractState>
    > {
        fn init_ownable(ref self: ComponentState<TContractState>, owner: ContractAddress);
        fn validate_ownership(self: @ComponentState<TContractState>);
    }

=======
trait HasComponent<TContractState> {
    fn get_component(self: @TContractState) -> @ComponentState<TContractState>;
    fn get_component_mut(ref self: TContractState) -> ComponentState<TContractState>;
    fn get_contract(self: @ComponentState<TContractState>) -> @TContractState;
    fn get_contract_mut(ref self: ComponentState<TContractState>) -> TContractState;
    fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TContractState>, event: S);
}

#[starknet::embeddable]
impl Transfer<
            TContractState, impl X: HasComponent<TContractState>
, impl TContractStateDrop: Drop<TContractState>
> of super::TransferTrait<TContractState> {
    
    fn owner(self: @TContractState) -> ContractAddress {
        let component = HasComponent::get_component(self);
        TransferImpl::owner(component)
    }
    
    fn transfer_ownership(ref self: TContractState, new_owner: ContractAddress
) {
        let mut component = HasComponent::get_component_mut(ref self);
        TransferImpl::transfer_ownership(ref component, new_owner)
    }
}

generate_trait:

    trait OwnableHelperTrait<
        TContractState, impl X: HasComponent<TContractState>
    > {
        fn init_ownable(ref self: ComponentState<TContractState>, owner: ContractAddress);
        fn validate_ownership(self: @ComponentState<TContractState>);
    }

>>>>>>> origin/dev-v2.3.0

impl ContractStateTransfer of
    ownable_comp::UnsafeNewContractStateTraitForTransfer<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OwnableBalanceImpl__constructor(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_owner = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_initial = option::OptionTraitImpl::expect(
        serde::Serde::<u128>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    OwnableBalanceImpl::constructor(ref contract_state, __arg_owner, __arg_initial);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OwnableBalanceImpl__get_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = OwnableBalanceImpl::get_balance(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u128>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OwnableBalanceImpl__set_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_new_balance = option::OptionTraitImpl::expect(
        serde::Serde::<u128>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    OwnableBalanceImpl::set_balance(ref contract_state, __arg_new_balance);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}


    mod __external {
        use super::__wrapper__OwnableBalanceImpl__get_balance as get_balance;
        use super::__wrapper__OwnableBalanceImpl__set_balance as set_balance;
    }

    mod __l1_handler {
    }

    mod __constructor {
        use super::__wrapper__OwnableBalanceImpl__constructor as constructor;
    }

    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

impl HasComponentImpl_ownable_comp of ownable_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @ownable_comp::ComponentState<ContractState> {
        self.ownable
    }
    fn get_component_mut(ref self: ContractState) -> ownable_comp::ComponentState<ContractState> {
        ownable_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @ownable_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: ownable_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: traits::Into<S, ownable_comp::Event>>(ref self: ownable_comp::ComponentState<ContractState>, event: S) {
        let event: ownable_comp::Event = traits::Into::into(event);
        let mut contract = ownable_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Ownable(event));
    }
}
impl EventDrop of Drop::<Event>;
impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Ownable(val) => {
                array::ArrayTrait::append(ref keys, selector!("Ownable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("Ownable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Ownable(val));
        }
        Option::None
    }
}
impl EventOwnableIntoEvent of Into<ownable_comp::Event, Event> {
    fn into(self: ownable_comp::Event) -> Event {
        Event::Ownable(self)
    }
}
    trait OwnableBalance {
        fn constructor(ref self: ContractState, owner: ContractAddress, initial: u128);
        fn get_balance(self: @ContractState) -> u128;
        fn set_balance(ref self: ContractState, new_balance: u128);
    }
}

    use cairo_level_tests::components::ownable::ownable as ownable_comp;
    use cairo_level_tests::components::ownable::TransferTrait;
    use starknet::ContractAddress;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Ownable: ownable_comp::Event,
    }

    #[abi(embed_v0)]
    impl OwnershipTransfer = ownable_comp::Transfer<ContractState>;

    impl OwnershipHelper = ownable_comp::OwnableHelperImpl<ContractState>;

    #[abi(per_item)]
    #[generate_trait]
    impl OwnableBalanceImpl of OwnableBalance {
        #[constructor]
        fn constructor(ref self: ContractState, owner: ContractAddress, initial: u128) {
            self.ownable.init_ownable(owner);
            self.balance.write(initial);
        }
        #[external(v0)]
        fn get_balance(self: @ContractState) -> u128 {
            self.balance.read()
        }
        #[external(v0)]
        fn set_balance(ref self: ContractState, new_balance: u128) {
            self.ownable.validate_ownership();
            self.balance.write(new_balance);
        }
    }


    struct ContractState {
        ownable: ownable_comp::ComponentState<ContractState>,
        balance: balance::ContractMemberState,
    }
    impl ContractStateDrop of Drop<ContractState> {}
    #[inline(always)]
    fn unsafe_new_contract_state() -> ContractState {
        ContractState {
            ownable: ownable_comp::unsafe_new_component_state::<ContractState>(),
            balance: balance::ContractMemberState {},
        }
    }
    
    use balance::InternalContractMemberStateTrait as balanceContractMemberStateTrait;
    mod balance {
        use super::ownable_comp;
        use super::TransferTrait;
        use super::ContractAddress;
        use super::Event;
        use super::OwnableBalanceImpl;
        #[derive(Copy, Drop)]
        struct ContractMemberState {}
        trait InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ContractMemberState) -> u128;
            fn write(ref self: ContractMemberState, value: u128);
        }

        impl InternalContractMemberStateImpl of InternalContractMemberStateTrait {
            fn address(self: @ContractMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x206f38f7e4f15e87567361213c28f235cccdaa1d7fd34c9db1dfe9489c6a091>()
            }
            fn read(self: @ContractMemberState) -> u128 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u128>::read(
                        address_domain,
                        InternalContractMemberStateImpl::address(self),
                    )
                )
            }
            fn write(ref self: ContractMemberState, value: u128) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u128>::write(
                        address_domain,
                        InternalContractMemberStateImpl::address(@self),
                        value,
                    )
                )
            }
        }
impl ContractMemberStateCopy of Copy::<ContractMemberState>;
impl ContractMemberStateDrop of Drop::<ContractMemberState>;
    }
use starknet::storage::{
    StorageMapMemberAddressTrait, StorageMemberAddressTrait,
    StorageMapMemberAccessTrait, StorageMemberAccessTrait
};

impl ContractStateTransfer of
    ownable_comp::UnsafeNewContractStateTraitForTransfer<ContractState> {
    fn unsafe_new_contract_state() -> ContractState {
        unsafe_new_contract_state()
    }
}
#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OwnableBalanceImpl__constructor(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_owner = option::OptionTraitImpl::expect(
        serde::Serde::<ContractAddress>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    let __arg_initial = option::OptionTraitImpl::expect(
        serde::Serde::<u128>::deserialize(ref data),
        'Failed to deserialize param #2'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    OwnableBalanceImpl::constructor(ref contract_state, __arg_owner, __arg_initial);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OwnableBalanceImpl__get_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    let res = OwnableBalanceImpl::get_balance(@contract_state, );
    let mut arr = array::array_new();
    // References.
    // Result.
    serde::Serde::<u128>::serialize(@res, ref arr);
    array::ArrayTrait::span(@arr)
}

#[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
fn __wrapper__OwnableBalanceImpl__set_balance(mut data: Span::<felt252>) -> Span::<felt252> {
    internal::require_implicit::<System>();
    internal::revoke_ap_tracking();
    option::OptionTraitImpl::expect(gas::withdraw_gas(), 'Out of gas');
    let __arg_new_balance = option::OptionTraitImpl::expect(
        serde::Serde::<u128>::deserialize(ref data),
        'Failed to deserialize param #1'
    );
    assert(array::SpanTrait::is_empty(data), 'Input too long for arguments');
    option::OptionTraitImpl::expect(
        gas::withdraw_gas_all(get_builtin_costs()), 'Out of gas',
    );
    let mut contract_state = unsafe_new_contract_state();
    OwnableBalanceImpl::set_balance(ref contract_state, __arg_new_balance);
    let mut arr = array::array_new();
    // References.
    // Result.
    array::ArrayTrait::span(@arr)
}


    mod __external {
        use super::__wrapper__OwnableBalanceImpl__get_balance as get_balance;
        use super::__wrapper__OwnableBalanceImpl__set_balance as set_balance;
    }

    mod __l1_handler {
    }

    mod __constructor {
        use super::__wrapper__OwnableBalanceImpl__constructor as constructor;
    }

    impl ContractStateEventEmitter of starknet::event::EventEmitter<
        ContractState, Event
    > {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(
            ref self: ContractState, event: S
        ) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

impl HasComponentImpl_ownable_comp of ownable_comp::HasComponent<ContractState> {
    fn get_component(self: @ContractState) -> @ownable_comp::ComponentState<ContractState> {
        self.ownable
    }
    fn get_component_mut(ref self: ContractState) -> ownable_comp::ComponentState<ContractState> {
        ownable_comp::unsafe_new_component_state::<ContractState>()
    }
    fn get_contract(self: @ownable_comp::ComponentState<ContractState>) -> @ContractState {
        @unsafe_new_contract_state()
    }
    fn get_contract_mut(ref self: ownable_comp::ComponentState<ContractState>) -> ContractState {
        unsafe_new_contract_state()
    }
    fn emit<S, impl IntoImp: traits::Into<S, ownable_comp::Event>>(ref self: ownable_comp::ComponentState<ContractState>, event: S) {
        let event: ownable_comp::Event = traits::Into::into(event);
        let mut contract = ownable_comp::HasComponent::get_contract_mut(ref self);
        ContractStateEventEmitter::emit(ref contract, Event::Ownable(event));
    }
}
impl EventDrop of Drop::<Event>;
impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Ownable(val) => {
                array::ArrayTrait::append(ref keys, selector!("Ownable"));
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        if selector == selector!("Ownable") {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Ownable(val));
        }
        Option::None
    }
}
impl EventOwnableIntoEvent of Into<ownable_comp::Event, Event> {
    fn into(self: ownable_comp::Event) -> Event {
        Event::Ownable(self)
    }
}
    trait OwnableBalance {
        fn constructor(ref self: ContractState, owner: ContractAddress, initial: u128);
        fn get_balance(self: @ContractState) -> u128;
        fn set_balance(ref self: ContractState, new_balance: u128);
    }

//! > expected_diagnostics
