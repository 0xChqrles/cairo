//! > Test implicits with multiple jumps to arm blocks.

//! > test_runner_name
test_function_lowering

//! > function
fn foo(a: u256) -> u64 {
    U256TryIntoU64::try_into(a).unwrap()
}

//! > function_name
foo

//! > module_code
impl U256TryIntoU64 of TryInto<u256, u64> {
    #[inline(always)]
    fn try_into(self: u256) -> Option<u64> {
        if (self.high == 0) {
            self.low.try_into()
        } else {
            Option::None
        }
    }
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
<<<<<<< HEAD
Parameters: v65: core::RangeCheck, v0: core::integer::u256
=======
Parameters: v46: core::RangeCheck, v0: core::integer::u256
>>>>>>> f2deaae12... Add inlining of small functions. (#5067)
blk0 (root):
Statements:
  (v10: core::integer::u128, v11: core::integer::u128) <- struct_destructure(v0)
  (v14: core::integer::u128) <- 0u
End:
  Match(match core::integer::u128_eq(v11, v14) {
    bool::False => blk1,
    bool::True => blk2,
  })

blk1:
Statements:
End:
<<<<<<< HEAD
  Goto(blk5, {v65 -> v69})

blk2:
Statements:
  (v78: core::RangeCheck, v20: core::option::Option::<core::integer::u64>) <- core::integer::DowncastableIntTryInto::<core::integer::u128, core::integer::u64, core::integer::DowncastableU128, core::integer::DowncastableU64, _>::try_into(v65, v10)
End:
  Match(match_enum(v20) {
    Option::Some(v40) => blk3,
    Option::None(v62) => blk4,
=======
  Goto(blk5, {v46 -> v50})

blk2:
Statements:
End:
  Match(match core::integer::downcast::<core::integer::u128, core::integer::u64>(v46, v3) {
    Option::Some(v58, v26) => blk3,
    Option::None(v59) => blk4,
>>>>>>> f2deaae12... Add inlining of small functions. (#5067)
  })

blk3:
Statements:
<<<<<<< HEAD
  (v46: (core::integer::u64,)) <- struct_construct(v40)
  (v47: core::panics::PanicResult::<(core::integer::u64,)>) <- PanicResult::Ok(v46)
End:
  Return(v78, v47)
=======
  (v43: (core::integer::u64,)) <- struct_construct(v26)
  (v44: core::panics::PanicResult::<(core::integer::u64,)>) <- PanicResult::Ok(v43)
End:
  Return(v58, v44)
>>>>>>> f2deaae12... Add inlining of small functions. (#5067)

blk4:
Statements:
End:
<<<<<<< HEAD
  Goto(blk5, {v78 -> v69})

blk5:
Statements:
  (v57: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v24: core::felt252) <- 29721761890975875353235833581453094220424382983267374u
  (v58: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v57, v24)
  (v63: core::panics::Panic) <- struct_construct()
  (v45: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v63, v58)
  (v50: core::panics::PanicResult::<(core::integer::u64,)>) <- PanicResult::Err(v45)
End:
  Return(v69, v50)
=======
  Goto(blk5, {v59 -> v50})

blk5:
Statements:
  (v40: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v17: core::felt252) <- 29721761890975875353235833581453094220424382983267374u
  (v41: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v40, v17)
  (v38: core::panics::Panic) <- struct_construct()
  (v39: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v38, v41)
  (v45: core::panics::PanicResult::<(core::integer::u64,)>) <- PanicResult::Err(v39)
End:
  Return(v50, v45)
>>>>>>> f2deaae12... Add inlining of small functions. (#5067)

//! > lowering
Main:
Parameters:
blk0 (root):
Statements:
  (v0: core::felt252) <- 5u
  (v2: core::felt252, v1: core::bool) <- foo[expr14](v0)
End:
  Return(v1)


Generated:
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 1u
  (v2: core::felt252) <- core::Felt252Add::add(v0, v1)
  (v3: core::felt252) <- 10u
  (v4: core::felt252) <- core::Felt252Sub::sub(v2, v3)
End:
  Match(match core::felt252_is_zero(v4) {
    IsZeroResult::Zero => blk1,
    IsZeroResult::NonZero(v7) => blk2,
  })

blk1:
Statements:
  (v5: ()) <- struct_construct()
  (v6: core::bool) <- bool::True(v5)
End:
  Return(v2, v6)

blk2:
Statements:
End:
  Goto(blk3, {})

blk3:
Statements:
  (v9: core::felt252, v8: core::bool) <- foo[expr14](v2)
End:
  Return(v9, v8)
